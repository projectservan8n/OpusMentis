// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MVP: User data is managed by Clerk, we only store extended user info
model User {
  id        String   @id // Clerk user ID
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Usage tracking for plan limits
  monthlyUploads    Int      @default(0)
  lastResetDate     DateTime @default(now())

  // User preferences (settings)
  aiSummaryStyle      String  @default("comprehensive") // brief, comprehensive, bullet
  aiFlashcardDifficulty String @default("mixed") // easy, medium, hard, mixed
  aiKanbanDepth       String  @default("detailed") // simple, detailed, progressive
  aiPreferredLanguage String  @default("english") // english, filipino, auto
  exportIncludeNotes  Boolean @default(true)
  exportIncludeFlashcards Boolean @default(true)
  exportIncludeKanban Boolean @default(true)
  exportPdfLayout     String  @default("standard") // standard, compact, study-guide

  // Relations
  studyPacks StudyPack[]
  notes      Note[]
  paymentProofs PaymentProof[]

  @@map("users")
}

model StudyPack {
  id          String   @id @default(cuid())
  title       String
  description String?

  // File metadata
  originalFileName String
  fileType         String // pdf, audio, video, image
  fileSize         Int    // in bytes
  filePath         String? // MVP: local storage path, later: cloud storage URL

  // Processing status
  status          String   @default("processing") // processing, completed, failed
  processingError String?

  // AI-generated content (JSON stored as text for MVP)
  summary     String?  @db.Text // AI-generated summary
  topics      String?  // JSON array of topics
  flashcards  String?  // JSON array of flashcard objects (kept for backward compatibility)
  kanbanTasks String?  // JSON array of kanban task objects
  transcript  String?  @db.Text // Timestamped transcript for audio/video files

  // Team sharing (Premium feature)
  organizationId String? // Clerk organization ID if shared with team

  // Media playback progress (for audio/video files)
  lastPlaybackPosition Float?   @default(0) // in seconds
  lastPlayedAt         DateTime?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes  Note[]
  highlights        Highlight[]
  documentStructure DocumentStructure?
  quizzes           Quiz[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([userId, status])
  @@index([organizationId])
  @@map("study_packs")
}

model Note {
  id      String @id @default(cuid())
  content String

  // Position/context within study pack
  section String? // summary, kanban, flashcards, general

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId      String
  studyPackId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  studyPack   StudyPack @relation(fields: [studyPackId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([studyPackId])
  @@index([userId, studyPackId])
  @@map("notes")
}

// MVP: Simple usage tracking for plan limits
model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // upload, process, export
  fileType  String?
  fileSize  Int?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([userId, action])
  @@map("usage_logs")
}

// GCash Payment Proof for manual payment verification
model PaymentProof {
  id           String   @id @default(cuid())
  userId       String
  planRequested String  // pro, premium
  billingPeriod String  @default("monthly") // monthly, annual
  screenshotUrl String  // path to uploaded proof image
  amount       String  // amount paid (for verification)
  referenceNumber String? // GCash reference number if provided
  status       String   @default("pending") // pending, approved, rejected
  adminNotes   String?  // Admin comments for rejection/approval
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([userId, status])
  @@map("payment_proofs")
}

// Stretch: Team sharing for Premium users
model Team {
  id          String   @id @default(cuid())
  name        String
  ownerId     String
  memberIds   String[] // Array of Clerk user IDs
  createdAt   DateTime @default(now())

  // Shared study packs
  sharedStudyPackIds String[] // Array of StudyPack IDs

  @@map("teams")
}

// Quiz System: PDF Highlights with coordinates
model Highlight {
  id          String    @id @default(cuid())
  studyPackId String
  studyPack   StudyPack @relation(fields: [studyPackId], references: [id], onDelete: Cascade)
  userId      String
  pageNumber  Int       // 1-indexed page number
  coordinates Json      // {x, y, width, height, pageHeight, pageWidth} for rendering
  color       String    // 'yellow', 'green', 'blue', 'pink', 'red'
  text        String    @db.Text // highlighted text content
  note        String?   @db.Text // optional user note
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([studyPackId])
  @@index([userId])
  @@index([pageNumber])
  @@map("highlights")
}

// AI-analyzed document structure (chapters, sections)
model DocumentStructure {
  id          String    @id @default(cuid())
  studyPackId String    @unique
  studyPack   StudyPack @relation(fields: [studyPackId], references: [id], onDelete: Cascade)
  chapters    Json      // [{title, startPage, endPage}, ...]
  sections    Json      // [{title, chapter, startPage, endPage}, ...]
  keyTerms    Json?     // [{term, definition, page}, ...] optional
  totalPages  Int
  createdAt   DateTime  @default(now())

  @@map("document_structures")
}

// Quiz (replaces flashcards functionality)
model Quiz {
  id            String        @id @default(cuid())
  studyPackId   String
  studyPack     StudyPack     @relation(fields: [studyPackId], references: [id], onDelete: Cascade)
  userId        String
  title         String
  source        String        // "All Highlights", "Chapter 5", "Pages 10-20", "Yellow Highlights"
  sourceDetails Json?         // {type, highlightIds?, pages?, chapter?} for regeneration
  questions     Json          // [{id, type, question, options?, correctAnswer?, points}, ...]
  totalPoints   Int           // sum of all question points
  difficulty    String        @default("medium") // 'easy', 'medium', 'hard'
  createdAt     DateTime      @default(now())
  attempts      QuizAttempt[]

  @@index([studyPackId])
  @@index([userId])
  @@map("quizzes")
}

// Quiz attempt with AI grading and feedback
model QuizAttempt {
  id          String    @id @default(cuid())
  quizId      String
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId      String
  answers     Json      // [{questionId, userAnswer, isCorrect?, pointsEarned}, ...]
  score       Float     // 0-100 percentage
  totalPoints Int       // points earned out of quiz.totalPoints
  feedback    Json      // [{questionId, feedback, suggestions?, pdfReferences?}, ...]
  timeSpent   Int?      // seconds
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  @@index([quizId])
  @@index([userId])
  @@map("quiz_attempts")
}

// API Keys for external integrations
model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String   // User-defined name for the key
  key         String   @unique // The actual API key (hashed in production)
  status      String   @default("active") // active, revoked
  lastUsedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([key])
  @@map("api_keys")
}

// Study Timer & Pomodoro Sessions
model StudySession {
  id           String   @id @default(cuid())
  userId       String
  studyPackId  String
  startedAt    DateTime @default(now())
  endedAt      DateTime?
  duration     Int      @default(0) // in seconds
  sessionType  String   @default("focus") // focus, short_break, long_break
  completed    Boolean  @default(false)
  pausedTime   Int      @default(0) // total paused time in seconds
  createdAt    DateTime @default(now())
  // Real-time timer state
  isActive     Boolean  @default(false) // timer is currently running
  isPaused     Boolean  @default(false) // timer is paused
  timeRemaining Int     @default(1500) // seconds remaining (default 25 min)
  lastSync     DateTime @default(now()) // last sync timestamp

  @@index([userId])
  @@index([studyPackId])
  @@index([userId, studyPackId])
  @@index([userId, isActive])
  @@index([createdAt])
  @@map("study_sessions")
}

// Flashcard Review System with Spaced Repetition
model FlashcardReview {
  id                String   @id @default(cuid())
  userId            String
  studyPackId       String
  flashcardId       String   // reference to flashcard in StudyPack.flashcards JSON
  easeFactor        Float    @default(2.5) // SM-2 algorithm ease factor
  interval          Int      @default(1) // days until next review
  repetitions       Int      @default(0) // number of successful repetitions
  nextReviewDate    DateTime @default(now())
  lastReviewDate    DateTime?
  lastReviewRating  String?  // again, hard, good, easy
  totalReviews      Int      @default(0)
  correctReviews    Int      @default(0)
  masteryLevel      String   @default("learning") // learning, young, mature, mastered
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([studyPackId])
  @@index([userId, studyPackId])
  @@index([userId, nextReviewDate])
  @@index([masteryLevel])
  @@unique([userId, studyPackId, flashcardId])
  @@map("flashcard_reviews")
}

// User Achievements & Progress Tracking
model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String   // study_streak, flashcard_master, kanban_warrior, quiz_ace, etc.
  title       String
  description String
  icon        String   // emoji or icon name
  unlockedAt  DateTime @default(now())
  progress    Int      @default(0) // for progress-based achievements
  goal        Int      @default(100) // target for progress-based achievements
  tier        String   @default("bronze") // bronze, silver, gold, platinum

  @@unique([userId, type])
  @@index([userId])
  @@index([type])
  @@map("achievements")
}

// User Study Statistics & Progress
model UserProgress {
  id                   String   @id @default(cuid())
  userId               String   @unique
  totalStudyTime       Int      @default(0) // in seconds
  currentStreak        Int      @default(0) // days
  longestStreak        Int      @default(0) // days
  lastStudyDate        DateTime?
  totalFlashcardsReviewed Int   @default(0)
  totalFlashcardsMastered Int   @default(0)
  totalKanbanCompleted    Int   @default(0)
  totalQuizzesTaken       Int   @default(0)
  totalQuizScore          Float @default(0) // average quiz score
  pomodorosCompleted      Int   @default(0)
  updatedAt            DateTime @updatedAt

  @@map("user_progress")
}

// AI Chat Messages - Chat with your study materials
model ChatMessage {
  id          String   @id @default(cuid())
  studyPackId String
  userId      String
  role        String   // 'user' or 'assistant'
  content     String   @db.Text
  createdAt   DateTime @default(now())

  @@index([studyPackId])
  @@index([userId])
  @@index([studyPackId, createdAt])
  @@map("chat_messages")
}